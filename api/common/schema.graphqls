scalar Map
scalar Any
scalar Time
scalar Path
scalar Message

enum Operator {
  NEQ
  EQ
}

enum Op {
  CREATE_NODE
  PATCH_NODE
  DELETE_NODE
  CREATE_EDGE
  PATCH_EDGE
  DELETE_EDGE
}

type Command {
  op: Op!
  value: Any!
  timestamp: Time!
}

type Counter {
  count: Int!
}

type Node {
  path: Path!
  attributes: Map
  createdAt: Time!
  updatedAt: Time!
}

type Edge {
  path: Path!
  mutual: Boolean!
  attributes: Map
  from: Path!
  to: Path!
  createdAt: Time!
  updatedAt: Time!
}

type Export {
  nodes: [Node]
  edges: [Edge]
}

input Filter {
  type: String!
  expressions: [String!]
  limit: Int!
}

input EdgeConstructor {
  path: Path!
  mutual: Boolean!
  attributes: Map
  from: Path!
  to: Path!
}

input NodeConstructor {
  path: Path!
  attributes: Map
}

input Patch {
  path: Path!
  patch: Map!
}

input DepthFilter {
  depth: Int!
  path: Path!
  expressions: [String!]
  limit: Int!
  reverse: Boolean
}

input ChangeFilter {
  op: Op!
  type: String!
  expressions: [String!]
}

input EdgeFilters {
  edgesFrom: [Filter!]
  edgesTo: [Filter!]
}

input Empty {
  ignore: String
}