syntax = "proto3";

package api;

option go_package = "apipb";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

enum Op {
  CREATE_NODES =0;
  PATCH_NODES =1;
  DELETE_NODES =2;
  CREATE_EDGES =3;
  PATCH_EDGES =4;
  DELETE_EDGES =5;
  SET_AUTH =6;

}

enum Keyword {
  ANY = 0;
  DEFAULT =1;
}

message Command {
  Op op =1;
  google.protobuf.Any val =2;
  google.protobuf.Timestamp timestamp =3;
}

message Counter {
  int64 count =1;
}

message Path {
  string Type =1;
  string ID =2;
}

message Paths {
  repeated Path paths =1;
}

message Node {
  Path path =1;
  google.protobuf.Struct attributes = 2;
  google.protobuf.Timestamp created_at =3;
  google.protobuf.Timestamp updated_at =4;
}

message Nodes {
  repeated Node nodes =1;
}

message Message {
  string channel =1;
  string type = 2;
  google.protobuf.Struct attributes = 3;
}

message Filter {
  string type =1;
  repeated string expressions =2;
  int32 limit =3;
}

message PathFilter {
  Path path =1;
  Filter filter =2;
}

message Export {
  Nodes nodes =1;
  Edges edges =2;
}

message Patch {
  Path path =1;
  google.protobuf.Struct patch = 2;
}

message Patches {
  repeated Patch patches =1;
}

message Edge {
  Path path =1;
  bool mutual =2;
  google.protobuf.Struct attributes = 3;
  Path from =4;
  Path to =5;
  google.protobuf.Timestamp created_at =6;
  google.protobuf.Timestamp updated_at =7;
}

message Edges {
  repeated Edge edges =1;
}

message RaftNode {
  string node_id =1;
  string address =2;
}

message JoinClusterRequest {
  RaftNode raft_node =1;
}

message JWKSSource {
  string uri =1;
  string issuer =2;
}

message Auth {
  repeated JWKSSource jwks_sources =1;
  repeated string auth_expressions =2;
}

message RaftConfig {
  string bind =1;
  string storage_path =2;
  string join =3;
  string node_id =4;
}

message HTTPConfig {
  string bind =1;
  repeated string allowed_origins=2;
  repeated string allowed_headers =3;
  repeated string allowed_methods =4;
}

message GRPCConfig {
  string bind =1;
}

message Config {
  HTTPConfig http =1;
  GRPCConfig grpc =2;
  RaftConfig raft =3;
}

message GetAuthResponse {
  Auth auth =1;
}

message SetAuthRequest {
  Auth auth =1;
}

message SetAuthResponse {
  Auth auth =1;
}

message CreateNodesRequest {
  Nodes nodes =1;
}

message CreateNodesResponse {
  Nodes nodes =1;
}

message SearchNodesRequest {
    Filter filter =1;
}

message SearchNodesResponse {
  Nodes nodes = 1;
}

message PatchNodesRequest {
  Patches patches =1;
}

message PatchNodesResponse {
  Nodes nodes =1;
}

message DelNodesRequest {
  Paths paths =1;
}

message DelNodesResponse {
  Counter counter =1;
}

message CreateEdgesRequest {
  Edges edges =1;
}

message CreateEdgesResponse {
  Edges edges =1;
}

message SearchEdgesRequest {
  Filter filter =1;
}

message SearchEdgesResponse {
  Edges edges = 1;
}

message PatchEdgesRequest {
  Patches patches =1;
}

message PatchEdgesResponse {
  Edges edges =1;
}

message DelEdgesRequest {
  Paths paths =1;
}

message DelEdgesResponse {
  Counter counter =1;
}

message EdgesFromRequest {
  PathFilter filter =1;
}

message EdgesFromResponse {
  Edges edges =1;
}

message EdgesToRequest {
  PathFilter filter =1;
}

message EdgesToResponse {
  Edges edges =1;
}

message UserIntercept {
  string request_path =1;
  oneof request {
    google.protobuf.Empty empty =2;
    Patches patches =3;
    Paths paths =5;
    Nodes nodes =6;
    Edges edges =7;
    Filter filter =8;
    Auth  auth =9;
    RaftNode raft =10;
    PathFilter path_filter =11;
  }
  Node user =99;
}

service PrivateService {
  rpc JoinCluster(JoinClusterRequest) returns(google.protobuf.Empty) {}
  rpc GetAuth(google.protobuf.Empty) returns(GetAuthResponse){}
  rpc SetAuth(SetAuthRequest) returns(SetAuthResponse){}

  rpc CreateNodes(CreateNodesRequest) returns(CreateNodesResponse){}
  rpc SearchNodes(SearchNodesRequest) returns (SearchNodesResponse){}
  rpc PatchNodes(PatchNodesRequest) returns(PatchNodesResponse){}
  rpc DelNodes(DelNodesRequest) returns(DelNodesResponse){}

  rpc CreateEdges(CreateEdgesRequest) returns(CreateEdgesResponse){}
  rpc SearchEdges(SearchEdgesRequest) returns (SearchEdgesResponse){}
  rpc PatchEdges(PatchEdgesRequest) returns(PatchEdgesResponse){}
  rpc DelEdges(DelEdgesRequest) returns(DelEdgesResponse){}

  rpc EdgesFrom(EdgesFromRequest) returns(EdgesFromResponse){}
  rpc EdgesTo(EdgesToRequest) returns(EdgesToResponse){}
}
