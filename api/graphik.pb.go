// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/graphik.proto

package apipb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Op int32

const (
	Op_CREATE_NODES Op = 0
	Op_CREATE_NODE  Op = 1
	Op_PATCH_NODES  Op = 2
	Op_PATCH_NODE   Op = 3
	Op_DELETE_NODES Op = 4
	Op_DELETE_NODE  Op = 5
	Op_CREATE_EDGES Op = 6
	Op_CREATE_EDGE  Op = 7
	Op_PATCH_EDGES  Op = 8
	Op_PATCH_EDGE   Op = 9
	Op_DELETE_EDGES Op = 10
	Op_DELETE_EDGE  Op = 11
	Op_SET_AUTH     Op = 12
)

var Op_name = map[int32]string{
	0:  "CREATE_NODES",
	1:  "CREATE_NODE",
	2:  "PATCH_NODES",
	3:  "PATCH_NODE",
	4:  "DELETE_NODES",
	5:  "DELETE_NODE",
	6:  "CREATE_EDGES",
	7:  "CREATE_EDGE",
	8:  "PATCH_EDGES",
	9:  "PATCH_EDGE",
	10: "DELETE_EDGES",
	11: "DELETE_EDGE",
	12: "SET_AUTH",
}

var Op_value = map[string]int32{
	"CREATE_NODES": 0,
	"CREATE_NODE":  1,
	"PATCH_NODES":  2,
	"PATCH_NODE":   3,
	"DELETE_NODES": 4,
	"DELETE_NODE":  5,
	"CREATE_EDGES": 6,
	"CREATE_EDGE":  7,
	"PATCH_EDGES":  8,
	"PATCH_EDGE":   9,
	"DELETE_EDGES": 10,
	"DELETE_EDGE":  11,
	"SET_AUTH":     12,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{0}
}

type Cascade int32

const (
	Cascade_CASCADE_NONE   Cascade = 0
	Cascade_CASCADE_FROM   Cascade = 1
	Cascade_CASCADE_TO     Cascade = 2
	Cascade_CASCADE_MUTUAL Cascade = 3
)

var Cascade_name = map[int32]string{
	0: "CASCADE_NONE",
	1: "CASCADE_FROM",
	2: "CASCADE_TO",
	3: "CASCADE_MUTUAL",
}

var Cascade_value = map[string]int32{
	"CASCADE_NONE":   0,
	"CASCADE_FROM":   1,
	"CASCADE_TO":     2,
	"CASCADE_MUTUAL": 3,
}

func (x Cascade) String() string {
	return proto.EnumName(Cascade_name, int32(x))
}

func (Cascade) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{1}
}

type Keyword int32

const (
	Keyword_INVALID Keyword = 0
	Keyword_ANY     Keyword = 1
	Keyword_DEFAULT Keyword = 2
)

var Keyword_name = map[int32]string{
	0: "INVALID",
	1: "ANY",
	2: "DEFAULT",
}

var Keyword_value = map[string]int32{
	"INVALID": 0,
	"ANY":     1,
	"DEFAULT": 2,
}

func (x Keyword) String() string {
	return proto.EnumName(Keyword_name, int32(x))
}

func (Keyword) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{2}
}

type Counter struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{0}
}

func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

func (m *Counter) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Path struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{1}
}

func (m *Path) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Path.Unmarshal(m, b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Path.Marshal(b, m, deterministic)
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return xxx_messageInfo_Path.Size(m)
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Path) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Paths struct {
	Paths                []*Path  `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paths) Reset()         { *m = Paths{} }
func (m *Paths) String() string { return proto.CompactTextString(m) }
func (*Paths) ProtoMessage()    {}
func (*Paths) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{2}
}

func (m *Paths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paths.Unmarshal(m, b)
}
func (m *Paths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paths.Marshal(b, m, deterministic)
}
func (m *Paths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paths.Merge(m, src)
}
func (m *Paths) XXX_Size() int {
	return xxx_messageInfo_Paths.Size(m)
}
func (m *Paths) XXX_DiscardUnknown() {
	xxx_messageInfo_Paths.DiscardUnknown(m)
}

var xxx_messageInfo_Paths proto.InternalMessageInfo

func (m *Paths) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type Node struct {
	Type                 string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	CreatedAt            int64           `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64           `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Node) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Node) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Nodes struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{4}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Edge struct {
	Type                 string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Cascade              Cascade         `protobuf:"varint,4,opt,name=cascade,proto3,enum=api.Cascade" json:"cascade,omitempty"`
	From                 *Path           `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                   *Path           `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	CreatedAt            int64           `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64           `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Edge) Reset()         { *m = Edge{} }
func (m *Edge) String() string { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()    {}
func (*Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{5}
}

func (m *Edge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edge.Unmarshal(m, b)
}
func (m *Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edge.Marshal(b, m, deterministic)
}
func (m *Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge.Merge(m, src)
}
func (m *Edge) XXX_Size() int {
	return xxx_messageInfo_Edge.Size(m)
}
func (m *Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Edge proto.InternalMessageInfo

func (m *Edge) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Edge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Edge) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Edge) GetCascade() Cascade {
	if m != nil {
		return m.Cascade
	}
	return Cascade_CASCADE_NONE
}

func (m *Edge) GetFrom() *Path {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Edge) GetTo() *Path {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Edge) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Edge) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Edges struct {
	Edges                []*Edge  `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Edges) Reset()         { *m = Edges{} }
func (m *Edges) String() string { return proto.CompactTextString(m) }
func (*Edges) ProtoMessage()    {}
func (*Edges) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{6}
}

func (m *Edges) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edges.Unmarshal(m, b)
}
func (m *Edges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edges.Marshal(b, m, deterministic)
}
func (m *Edges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edges.Merge(m, src)
}
func (m *Edges) XXX_Size() int {
	return xxx_messageInfo_Edges.Size(m)
}
func (m *Edges) XXX_DiscardUnknown() {
	xxx_messageInfo_Edges.DiscardUnknown(m)
}

var xxx_messageInfo_Edges proto.InternalMessageInfo

func (m *Edges) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type RaftLog struct {
	// Types that are valid to be assigned to Log:
	//	*RaftLog_Node
	//	*RaftLog_Nodes
	//	*RaftLog_Edge
	//	*RaftLog_Edges
	//	*RaftLog_Path
	//	*RaftLog_Paths
	//	*RaftLog_Auth
	//	*RaftLog_Counter
	Log                  isRaftLog_Log `protobuf_oneof:"log"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RaftLog) Reset()         { *m = RaftLog{} }
func (m *RaftLog) String() string { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()    {}
func (*RaftLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{7}
}

func (m *RaftLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftLog.Unmarshal(m, b)
}
func (m *RaftLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftLog.Marshal(b, m, deterministic)
}
func (m *RaftLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLog.Merge(m, src)
}
func (m *RaftLog) XXX_Size() int {
	return xxx_messageInfo_RaftLog.Size(m)
}
func (m *RaftLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLog.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLog proto.InternalMessageInfo

type isRaftLog_Log interface {
	isRaftLog_Log()
}

type RaftLog_Node struct {
	Node *Node `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type RaftLog_Nodes struct {
	Nodes *Nodes `protobuf:"bytes,2,opt,name=nodes,proto3,oneof"`
}

type RaftLog_Edge struct {
	Edge *Edge `protobuf:"bytes,3,opt,name=edge,proto3,oneof"`
}

type RaftLog_Edges struct {
	Edges *Edges `protobuf:"bytes,4,opt,name=edges,proto3,oneof"`
}

type RaftLog_Path struct {
	Path *Path `protobuf:"bytes,5,opt,name=path,proto3,oneof"`
}

type RaftLog_Paths struct {
	Paths *Paths `protobuf:"bytes,6,opt,name=paths,proto3,oneof"`
}

type RaftLog_Auth struct {
	Auth *AuthConfig `protobuf:"bytes,7,opt,name=auth,proto3,oneof"`
}

type RaftLog_Counter struct {
	Counter *Counter `protobuf:"bytes,8,opt,name=counter,proto3,oneof"`
}

func (*RaftLog_Node) isRaftLog_Log() {}

func (*RaftLog_Nodes) isRaftLog_Log() {}

func (*RaftLog_Edge) isRaftLog_Log() {}

func (*RaftLog_Edges) isRaftLog_Log() {}

func (*RaftLog_Path) isRaftLog_Log() {}

func (*RaftLog_Paths) isRaftLog_Log() {}

func (*RaftLog_Auth) isRaftLog_Log() {}

func (*RaftLog_Counter) isRaftLog_Log() {}

func (m *RaftLog) GetLog() isRaftLog_Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *RaftLog) GetNode() *Node {
	if x, ok := m.GetLog().(*RaftLog_Node); ok {
		return x.Node
	}
	return nil
}

func (m *RaftLog) GetNodes() *Nodes {
	if x, ok := m.GetLog().(*RaftLog_Nodes); ok {
		return x.Nodes
	}
	return nil
}

func (m *RaftLog) GetEdge() *Edge {
	if x, ok := m.GetLog().(*RaftLog_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *RaftLog) GetEdges() *Edges {
	if x, ok := m.GetLog().(*RaftLog_Edges); ok {
		return x.Edges
	}
	return nil
}

func (m *RaftLog) GetPath() *Path {
	if x, ok := m.GetLog().(*RaftLog_Path); ok {
		return x.Path
	}
	return nil
}

func (m *RaftLog) GetPaths() *Paths {
	if x, ok := m.GetLog().(*RaftLog_Paths); ok {
		return x.Paths
	}
	return nil
}

func (m *RaftLog) GetAuth() *AuthConfig {
	if x, ok := m.GetLog().(*RaftLog_Auth); ok {
		return x.Auth
	}
	return nil
}

func (m *RaftLog) GetCounter() *Counter {
	if x, ok := m.GetLog().(*RaftLog_Counter); ok {
		return x.Counter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RaftLog) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RaftLog_Node)(nil),
		(*RaftLog_Nodes)(nil),
		(*RaftLog_Edge)(nil),
		(*RaftLog_Edges)(nil),
		(*RaftLog_Path)(nil),
		(*RaftLog_Paths)(nil),
		(*RaftLog_Auth)(nil),
		(*RaftLog_Counter)(nil),
	}
}

type TypeFilter struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expressions          []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeFilter) Reset()         { *m = TypeFilter{} }
func (m *TypeFilter) String() string { return proto.CompactTextString(m) }
func (*TypeFilter) ProtoMessage()    {}
func (*TypeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{8}
}

func (m *TypeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeFilter.Unmarshal(m, b)
}
func (m *TypeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeFilter.Marshal(b, m, deterministic)
}
func (m *TypeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeFilter.Merge(m, src)
}
func (m *TypeFilter) XXX_Size() int {
	return xxx_messageInfo_TypeFilter.Size(m)
}
func (m *TypeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TypeFilter proto.InternalMessageInfo

func (m *TypeFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TypeFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *TypeFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PathFilter struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Expressions          []string `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathFilter) Reset()         { *m = PathFilter{} }
func (m *PathFilter) String() string { return proto.CompactTextString(m) }
func (*PathFilter) ProtoMessage()    {}
func (*PathFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{9}
}

func (m *PathFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathFilter.Unmarshal(m, b)
}
func (m *PathFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathFilter.Marshal(b, m, deterministic)
}
func (m *PathFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathFilter.Merge(m, src)
}
func (m *PathFilter) XXX_Size() int {
	return xxx_messageInfo_PathFilter.Size(m)
}
func (m *PathFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_PathFilter.DiscardUnknown(m)
}

var xxx_messageInfo_PathFilter proto.InternalMessageInfo

func (m *PathFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PathFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PathFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *PathFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Command struct {
	Op                   Op       `protobuf:"varint,1,opt,name=op,proto3,enum=api.Op" json:"op,omitempty"`
	Val                  *RaftLog `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{10}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_CREATE_NODES
}

func (m *Command) GetVal() *RaftLog {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *Command) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Export struct {
	Nodes                *Nodes   `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Edges                *Edges   `protobuf:"bytes,2,opt,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Export) Reset()         { *m = Export{} }
func (m *Export) String() string { return proto.CompactTextString(m) }
func (*Export) ProtoMessage()    {}
func (*Export) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{11}
}

func (m *Export) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Export.Unmarshal(m, b)
}
func (m *Export) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Export.Marshal(b, m, deterministic)
}
func (m *Export) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Export.Merge(m, src)
}
func (m *Export) XXX_Size() int {
	return xxx_messageInfo_Export.Size(m)
}
func (m *Export) XXX_DiscardUnknown() {
	xxx_messageInfo_Export.DiscardUnknown(m)
}

var xxx_messageInfo_Export proto.InternalMessageInfo

func (m *Export) GetNodes() *Nodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Export) GetEdges() *Edges {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{12}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RaftNode struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftNode) Reset()         { *m = RaftNode{} }
func (m *RaftNode) String() string { return proto.CompactTextString(m) }
func (*RaftNode) ProtoMessage()    {}
func (*RaftNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{13}
}

func (m *RaftNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftNode.Unmarshal(m, b)
}
func (m *RaftNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftNode.Marshal(b, m, deterministic)
}
func (m *RaftNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftNode.Merge(m, src)
}
func (m *RaftNode) XXX_Size() int {
	return xxx_messageInfo_RaftNode.Size(m)
}
func (m *RaftNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftNode.DiscardUnknown(m)
}

var xxx_messageInfo_RaftNode proto.InternalMessageInfo

func (m *RaftNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RaftNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AuthConfig struct {
	JwksSources          []string `protobuf:"bytes,1,rep,name=jwks_sources,json=jwksSources,proto3" json:"jwks_sources,omitempty"`
	AuthExpressions      []string `protobuf:"bytes,2,rep,name=auth_expressions,json=authExpressions,proto3" json:"auth_expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthConfig) Reset()         { *m = AuthConfig{} }
func (m *AuthConfig) String() string { return proto.CompactTextString(m) }
func (*AuthConfig) ProtoMessage()    {}
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{14}
}

func (m *AuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthConfig.Unmarshal(m, b)
}
func (m *AuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthConfig.Marshal(b, m, deterministic)
}
func (m *AuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfig.Merge(m, src)
}
func (m *AuthConfig) XXX_Size() int {
	return xxx_messageInfo_AuthConfig.Size(m)
}
func (m *AuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfig proto.InternalMessageInfo

func (m *AuthConfig) GetJwksSources() []string {
	if m != nil {
		return m.JwksSources
	}
	return nil
}

func (m *AuthConfig) GetAuthExpressions() []string {
	if m != nil {
		return m.AuthExpressions
	}
	return nil
}

type RaftConfig struct {
	Bind                 string   `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	StoragePath          string   `protobuf:"bytes,2,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	Join                 string   `protobuf:"bytes,3,opt,name=join,proto3" json:"join,omitempty"`
	NodeId               string   `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftConfig) Reset()         { *m = RaftConfig{} }
func (m *RaftConfig) String() string { return proto.CompactTextString(m) }
func (*RaftConfig) ProtoMessage()    {}
func (*RaftConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{15}
}

func (m *RaftConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftConfig.Unmarshal(m, b)
}
func (m *RaftConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftConfig.Marshal(b, m, deterministic)
}
func (m *RaftConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftConfig.Merge(m, src)
}
func (m *RaftConfig) XXX_Size() int {
	return xxx_messageInfo_RaftConfig.Size(m)
}
func (m *RaftConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RaftConfig proto.InternalMessageInfo

func (m *RaftConfig) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

func (m *RaftConfig) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *RaftConfig) GetJoin() string {
	if m != nil {
		return m.Join
	}
	return ""
}

func (m *RaftConfig) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type HTTPConfig struct {
	Bind                 string   `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	AllowedOrigins       []string `protobuf:"bytes,2,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	AllowedHeaders       []string `protobuf:"bytes,3,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	AllowedMethods       []string `protobuf:"bytes,4,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPConfig) Reset()         { *m = HTTPConfig{} }
func (m *HTTPConfig) String() string { return proto.CompactTextString(m) }
func (*HTTPConfig) ProtoMessage()    {}
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{16}
}

func (m *HTTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPConfig.Unmarshal(m, b)
}
func (m *HTTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPConfig.Marshal(b, m, deterministic)
}
func (m *HTTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPConfig.Merge(m, src)
}
func (m *HTTPConfig) XXX_Size() int {
	return xxx_messageInfo_HTTPConfig.Size(m)
}
func (m *HTTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPConfig proto.InternalMessageInfo

func (m *HTTPConfig) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

func (m *HTTPConfig) GetAllowedOrigins() []string {
	if m != nil {
		return m.AllowedOrigins
	}
	return nil
}

func (m *HTTPConfig) GetAllowedHeaders() []string {
	if m != nil {
		return m.AllowedHeaders
	}
	return nil
}

func (m *HTTPConfig) GetAllowedMethods() []string {
	if m != nil {
		return m.AllowedMethods
	}
	return nil
}

type GRPCConfig struct {
	Bind                 string   `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRPCConfig) Reset()         { *m = GRPCConfig{} }
func (m *GRPCConfig) String() string { return proto.CompactTextString(m) }
func (*GRPCConfig) ProtoMessage()    {}
func (*GRPCConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{17}
}

func (m *GRPCConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRPCConfig.Unmarshal(m, b)
}
func (m *GRPCConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRPCConfig.Marshal(b, m, deterministic)
}
func (m *GRPCConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCConfig.Merge(m, src)
}
func (m *GRPCConfig) XXX_Size() int {
	return xxx_messageInfo_GRPCConfig.Size(m)
}
func (m *GRPCConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCConfig proto.InternalMessageInfo

func (m *GRPCConfig) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

type Config struct {
	Http                 *HTTPConfig `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Grpc                 *GRPCConfig `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	Raft                 *RaftConfig `protobuf:"bytes,3,opt,name=raft,proto3" json:"raft,omitempty"`
	Auth                 *AuthConfig `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{18}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetHttp() *HTTPConfig {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Config) GetGrpc() *GRPCConfig {
	if m != nil {
		return m.Grpc
	}
	return nil
}

func (m *Config) GetRaft() *RaftConfig {
	if m != nil {
		return m.Raft
	}
	return nil
}

func (m *Config) GetAuth() *AuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.Op", Op_name, Op_value)
	proto.RegisterEnum("api.Cascade", Cascade_name, Cascade_value)
	proto.RegisterEnum("api.Keyword", Keyword_name, Keyword_value)
	proto.RegisterType((*Counter)(nil), "api.Counter")
	proto.RegisterType((*Path)(nil), "api.Path")
	proto.RegisterType((*Paths)(nil), "api.Paths")
	proto.RegisterType((*Node)(nil), "api.Node")
	proto.RegisterType((*Nodes)(nil), "api.Nodes")
	proto.RegisterType((*Edge)(nil), "api.Edge")
	proto.RegisterType((*Edges)(nil), "api.Edges")
	proto.RegisterType((*RaftLog)(nil), "api.RaftLog")
	proto.RegisterType((*TypeFilter)(nil), "api.TypeFilter")
	proto.RegisterType((*PathFilter)(nil), "api.PathFilter")
	proto.RegisterType((*Command)(nil), "api.Command")
	proto.RegisterType((*Export)(nil), "api.Export")
	proto.RegisterType((*Pong)(nil), "api.Pong")
	proto.RegisterType((*RaftNode)(nil), "api.RaftNode")
	proto.RegisterType((*AuthConfig)(nil), "api.AuthConfig")
	proto.RegisterType((*RaftConfig)(nil), "api.RaftConfig")
	proto.RegisterType((*HTTPConfig)(nil), "api.HTTPConfig")
	proto.RegisterType((*GRPCConfig)(nil), "api.GRPCConfig")
	proto.RegisterType((*Config)(nil), "api.Config")
}

func init() { proto.RegisterFile("api/graphik.proto", fileDescriptor_063490d3009de3e6) }

var fileDescriptor_063490d3009de3e6 = []byte{
	// 1312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xc1, 0x76, 0xdb, 0x44,
	0x17, 0xb6, 0x65, 0xd9, 0x8a, 0xaf, 0xd3, 0x44, 0xff, 0x9c, 0xff, 0x50, 0xd7, 0xb4, 0xc4, 0x55,
	0x4b, 0x1b, 0x42, 0x49, 0xcf, 0x09, 0x1c, 0x58, 0xb1, 0x70, 0x6d, 0x35, 0x2e, 0xa4, 0x89, 0x91,
	0x1d, 0x0e, 0x74, 0x63, 0x14, 0x6b, 0x22, 0xab, 0xb5, 0x3d, 0x3a, 0xd2, 0xb8, 0x6d, 0xd6, 0xf0,
	0x16, 0xb0, 0xe1, 0x0d, 0x78, 0x1d, 0x76, 0x3c, 0x0a, 0xe7, 0xce, 0x8c, 0xac, 0x89, 0x12, 0x07,
	0x36, 0xec, 0x46, 0xdf, 0xfd, 0xf4, 0xdd, 0x7b, 0x3f, 0xdd, 0x99, 0x11, 0xfc, 0xcf, 0x8f, 0xa3,
	0xa7, 0x61, 0xe2, 0xc7, 0xd3, 0xe8, 0xcd, 0x7e, 0x9c, 0x30, 0xce, 0x48, 0xc5, 0x8f, 0xa3, 0xd6,
	0xdd, 0x90, 0xb1, 0x70, 0x46, 0x9f, 0x0a, 0xe8, 0x6c, 0x79, 0xfe, 0x34, 0xe5, 0xc9, 0x72, 0xc2,
	0x25, 0xa5, 0xb5, 0x53, 0x8c, 0xf2, 0x68, 0x4e, 0x53, 0xee, 0xcf, 0x63, 0x45, 0xb8, 0x53, 0x24,
	0xf8, 0x8b, 0x0b, 0x15, 0xfa, 0xb0, 0x18, 0xa2, 0xf3, 0x98, 0xab, 0xa0, 0xb3, 0x03, 0x56, 0x97,
	0x2d, 0x17, 0x9c, 0x26, 0xe4, 0xff, 0x50, 0x9d, 0xe0, 0xb2, 0x59, 0x6e, 0x97, 0x77, 0x2b, 0x9e,
	0x7c, 0x70, 0xf6, 0xc0, 0x1c, 0xf8, 0x7c, 0x4a, 0x08, 0x98, 0xfc, 0x22, 0xa6, 0x22, 0x58, 0xf7,
	0xc4, 0x9a, 0x6c, 0x81, 0x11, 0x05, 0x4d, 0x43, 0x20, 0x46, 0x14, 0x38, 0xbb, 0x50, 0x45, 0x6e,
	0x4a, 0x76, 0xa0, 0x1a, 0xe3, 0xa2, 0x59, 0x6e, 0x57, 0x76, 0x1b, 0x07, 0xf5, 0x7d, 0x3f, 0x8e,
	0xf6, 0x31, 0xe4, 0x49, 0xdc, 0xf9, 0xbd, 0x0c, 0xe6, 0x31, 0x0b, 0xe8, 0xbf, 0x91, 0x25, 0x5f,
	0x01, 0xf8, 0x9c, 0x27, 0xd1, 0xd9, 0x92, 0xd3, 0xb4, 0x59, 0x69, 0x97, 0x77, 0x1b, 0x07, 0xb7,
	0xf7, 0x65, 0x57, 0xfb, 0x59, 0x57, 0xfb, 0x43, 0xe1, 0x97, 0xa7, 0x51, 0xc9, 0x3d, 0x80, 0x49,
	0x42, 0x7d, 0x4e, 0x83, 0xb1, 0xcf, 0x9b, 0xa6, 0x68, 0xab, 0xae, 0x90, 0x0e, 0xc7, 0xf0, 0x32,
	0x0e, 0xb2, 0x70, 0x55, 0x86, 0x15, 0xd2, 0xe1, 0xd8, 0x0d, 0x96, 0x28, 0xba, 0x59, 0xe0, 0xe2,
	0x52, 0x37, 0x18, 0xf2, 0x24, 0xee, 0xfc, 0x6c, 0x80, 0xe9, 0x06, 0xe1, 0x7f, 0xdc, 0xcd, 0x23,
	0xb0, 0x26, 0x7e, 0x3a, 0xf1, 0x03, 0x2a, 0x5a, 0xd9, 0x3a, 0xd8, 0x14, 0x85, 0x74, 0x25, 0xe6,
	0x65, 0x41, 0x72, 0x0f, 0xcc, 0xf3, 0x84, 0xcd, 0x45, 0x43, 0x97, 0xbc, 0x17, 0x30, 0xb9, 0x03,
	0x06, 0x67, 0xcd, 0x5a, 0x31, 0x68, 0x70, 0x56, 0xf0, 0x0b, 0x6e, 0xf6, 0xab, 0x71, 0x8d, 0x5f,
	0x68, 0x82, 0xf0, 0x8b, 0xe2, 0xe2, 0x92, 0x5f, 0x18, 0xf2, 0x24, 0xee, 0xfc, 0x61, 0x80, 0xe5,
	0xf9, 0xe7, 0xfc, 0x88, 0x85, 0x64, 0x07, 0x4c, 0x34, 0x51, 0x58, 0xa6, 0x7b, 0xdb, 0x2f, 0x79,
	0x22, 0x40, 0x9c, 0xcc, 0x7d, 0x43, 0x30, 0x60, 0xc5, 0x48, 0xfb, 0x25, 0xf5, 0x01, 0x50, 0x04,
	0x95, 0x95, 0x9b, 0x79, 0x42, 0x14, 0xc1, 0x00, 0x8a, 0xc8, 0x92, 0x4c, 0x4d, 0x44, 0x54, 0x8b,
	0x22, 0x54, 0x95, 0x6d, 0xe2, 0x70, 0x5e, 0xf1, 0x0d, 0x45, 0x30, 0x80, 0x22, 0x72, 0xaa, 0x6b,
	0x9a, 0x88, 0x18, 0x78, 0x14, 0x11, 0x21, 0xf2, 0x31, 0x98, 0xfe, 0x92, 0x4f, 0x9b, 0x96, 0xa0,
	0x6c, 0x0b, 0x4a, 0x67, 0xc9, 0xa7, 0x5d, 0xb6, 0x38, 0x8f, 0x42, 0x94, 0xc2, 0x30, 0xd9, 0x05,
	0x6b, 0x22, 0xb7, 0x5d, 0x73, 0x43, 0x30, 0xd5, 0xb7, 0x94, 0x58, 0xbf, 0xe4, 0x65, 0xe1, 0x67,
	0x55, 0xa8, 0xcc, 0x58, 0xe8, 0xfc, 0x00, 0x30, 0xba, 0x88, 0xe9, 0xf3, 0x68, 0x86, 0x5b, 0xf5,
	0xba, 0x39, 0x6b, 0x43, 0x83, 0xbe, 0x8f, 0x13, 0x9a, 0xa6, 0x11, 0x5b, 0xa0, 0x5b, 0x95, 0xdd,
	0xba, 0xa7, 0x43, 0xb8, 0xc1, 0x67, 0xd1, 0x3c, 0xe2, 0xc2, 0xa6, 0xaa, 0x27, 0x1f, 0x9c, 0x29,
	0x00, 0xf6, 0x70, 0x83, 0x72, 0x71, 0x82, 0x0b, 0x99, 0x2a, 0x37, 0x64, 0x32, 0xf5, 0x4c, 0x3f,
	0xe1, 0x59, 0x33, 0x9f, 0xfb, 0x8b, 0x80, 0xdc, 0x06, 0x83, 0xc5, 0x22, 0xc9, 0xd6, 0x81, 0x25,
	0x5a, 0x3f, 0x89, 0x3d, 0x83, 0xc5, 0xe4, 0x23, 0xa8, 0xbc, 0xf5, 0x67, 0xea, 0x5b, 0x4b, 0x53,
	0xd4, 0xa4, 0x78, 0x18, 0x20, 0x77, 0xa1, 0xbe, 0x3a, 0xfa, 0x44, 0x1f, 0x15, 0x2f, 0x07, 0x9c,
	0x23, 0xa8, 0xb9, 0xef, 0x63, 0x96, 0x70, 0xd2, 0xce, 0xf7, 0x6c, 0x61, 0x6a, 0xb2, 0x99, 0x69,
	0x67, 0x23, 0x61, 0x14, 0x47, 0x22, 0x1b, 0xd3, 0x36, 0x98, 0x03, 0xb6, 0x08, 0x49, 0x13, 0xac,
	0x39, 0x4d, 0x53, 0x3f, 0xcc, 0x6c, 0xc9, 0x1e, 0x9d, 0xaf, 0x61, 0x03, 0xab, 0x13, 0x27, 0xd9,
	0x6d, 0xb0, 0x50, 0x78, 0x1c, 0x05, 0x8a, 0x55, 0xc3, 0xc7, 0x17, 0x01, 0xbe, 0xee, 0x07, 0x01,
	0x7a, 0xa3, 0x3c, 0xcc, 0x1e, 0x9d, 0x57, 0x00, 0xf9, 0x6c, 0x90, 0xfb, 0xb0, 0xf9, 0xfa, 0xdd,
	0x9b, 0x74, 0x9c, 0xb2, 0x65, 0x32, 0x51, 0xbb, 0xa7, 0xee, 0x35, 0x10, 0x1b, 0x4a, 0x88, 0x7c,
	0x02, 0x36, 0x8e, 0xcf, 0xf8, 0xea, 0x87, 0xde, 0x46, 0xdc, 0xcd, 0x61, 0x27, 0x06, 0xc0, 0xd2,
	0x94, 0x36, 0x01, 0xf3, 0x2c, 0x5a, 0x64, 0x95, 0x89, 0x35, 0xe6, 0x4b, 0x39, 0x4b, 0xfc, 0x90,
	0x8e, 0xc5, 0xdc, 0xcb, 0xe2, 0x1a, 0x0a, 0xcb, 0x0e, 0xfd, 0xd7, 0x2c, 0x5a, 0x08, 0xa3, 0xeb,
	0x9e, 0x58, 0xeb, 0x7d, 0x9a, 0x7a, 0x9f, 0xce, 0xaf, 0x65, 0x80, 0xfe, 0x68, 0x34, 0xb8, 0x21,
	0xe5, 0x63, 0xd8, 0xf6, 0x67, 0x33, 0xf6, 0x8e, 0x06, 0x63, 0x96, 0x44, 0x61, 0xb4, 0x2a, 0x7f,
	0x4b, 0xc1, 0x27, 0x12, 0xd5, 0x89, 0x53, 0xea, 0x07, 0x34, 0xc9, 0xc6, 0x2c, 0x23, 0xf6, 0x25,
	0xaa, 0x13, 0xe7, 0x94, 0x4f, 0x59, 0x80, 0x5b, 0x5c, 0x27, 0xbe, 0x94, 0xa8, 0xd3, 0x06, 0x38,
	0xf4, 0x06, 0xdd, 0xf5, 0xc5, 0x39, 0xbf, 0x95, 0xa1, 0xa6, 0xc2, 0x0f, 0xc0, 0x9c, 0x72, 0x1e,
	0xab, 0xe1, 0x91, 0xbb, 0x38, 0x6f, 0xcd, 0x13, 0x41, 0x24, 0x85, 0x49, 0x3c, 0x51, 0xf3, 0x23,
	0x49, 0x79, 0x0a, 0x4f, 0x04, 0x91, 0x94, 0xf8, 0xe7, 0x5c, 0x9d, 0x4c, 0xdb, 0xab, 0x81, 0xce,
	0x48, 0x18, 0x44, 0x92, 0x38, 0x34, 0xcc, 0x6b, 0x0f, 0x0d, 0x79, 0x64, 0xec, 0xfd, 0x55, 0x06,
	0xe3, 0x24, 0x26, 0x36, 0x6c, 0x76, 0x3d, 0xb7, 0x33, 0x72, 0xc7, 0xc7, 0x27, 0x3d, 0x77, 0x68,
	0x97, 0xc8, 0x36, 0x34, 0x34, 0xc4, 0x2e, 0x23, 0x30, 0xe8, 0x8c, 0xba, 0x7d, 0xc5, 0x30, 0xc8,
	0x16, 0x40, 0x0e, 0xd8, 0x15, 0xd4, 0xe8, 0xb9, 0x47, 0xee, 0x4a, 0xc3, 0xc4, 0x57, 0x34, 0xc4,
	0xae, 0x6a, 0x69, 0xdc, 0xde, 0xa1, 0x3b, 0xb4, 0x6b, 0x5a, 0x1a, 0x44, 0x6c, 0x2b, 0x4f, 0x23,
	0x19, 0x1b, 0x79, 0x1a, 0x41, 0xa8, 0x6b, 0x69, 0x24, 0x03, 0xb4, 0x34, 0x82, 0xd2, 0x20, 0x9b,
	0xb0, 0x31, 0x74, 0x47, 0xe3, 0xce, 0xe9, 0xa8, 0x6f, 0x6f, 0xee, 0x7d, 0x07, 0x96, 0xba, 0xcd,
	0x44, 0xfe, 0xce, 0xb0, 0xdb, 0xe9, 0x61, 0x45, 0xc7, 0xae, 0x5d, 0xd2, 0x91, 0xe7, 0xde, 0xc9,
	0x4b, 0xbb, 0x8c, 0xf9, 0x32, 0x64, 0x74, 0x62, 0x1b, 0x84, 0xc0, 0x56, 0xf6, 0xfc, 0xf2, 0x74,
	0x74, 0xda, 0x39, 0xb2, 0x2b, 0x7b, 0x4f, 0xc0, 0xfa, 0x96, 0x5e, 0xbc, 0x63, 0x49, 0x40, 0x1a,
	0x60, 0xbd, 0x38, 0xfe, 0xbe, 0x73, 0xf4, 0xa2, 0x67, 0x97, 0x88, 0x05, 0x95, 0xce, 0xf1, 0x8f,
	0x76, 0x19, 0xd1, 0x9e, 0xfb, 0xbc, 0x73, 0x7a, 0x34, 0xb2, 0x8d, 0x83, 0x3f, 0xcb, 0x70, 0x4b,
	0x9a, 0x3e, 0xa4, 0xc9, 0xdb, 0x68, 0x42, 0xc9, 0xa7, 0x60, 0x0e, 0xa2, 0x45, 0x48, 0x3e, 0xb8,
	0x72, 0x43, 0xbb, 0xf8, 0x17, 0xd5, 0x52, 0xd7, 0x04, 0x5b, 0x84, 0x4e, 0x89, 0x7c, 0x09, 0x8d,
	0x6f, 0x58, 0xb4, 0xe8, 0xce, 0x96, 0x29, 0x9e, 0xa5, 0xb7, 0x56, 0x5f, 0x1b, 0x0f, 0x88, 0xd6,
	0x1a, 0x09, 0xa7, 0x44, 0xbe, 0x00, 0xeb, 0x90, 0x72, 0xfc, 0xe2, 0x6b, 0xf3, 0x14, 0x87, 0xc2,
	0x29, 0x91, 0xcf, 0xc0, 0x1a, 0xaa, 0xb7, 0x8a, 0xd1, 0x6b, 0xe8, 0x07, 0xbf, 0x54, 0x61, 0xf3,
	0x10, 0xff, 0x3b, 0xb3, 0xd6, 0x1e, 0x02, 0x74, 0xc5, 0xdd, 0x2e, 0x8e, 0xaf, 0xfc, 0xe6, 0x6d,
	0xe5, 0x4b, 0xa7, 0x44, 0x1e, 0x43, 0x23, 0x67, 0xa5, 0x44, 0x3b, 0x48, 0x5b, 0xda, 0xda, 0x29,
	0x91, 0xfb, 0xa2, 0x09, 0x4d, 0x0b, 0x4f, 0x90, 0xcb, 0x5a, 0x4f, 0xa0, 0x31, 0xa4, 0x7e, 0x32,
	0x99, 0x4a, 0x2d, 0x59, 0x64, 0x7e, 0xad, 0x15, 0x04, 0x1f, 0x40, 0x7d, 0xe0, 0x73, 0x49, 0x5e,
	0x5b, 0xde, 0x23, 0x71, 0x7b, 0x65, 0x8a, 0xeb, 0xab, 0x7b, 0x08, 0x56, 0x8f, 0xce, 0x8a, 0xd5,
	0x5d, 0xba, 0x75, 0x85, 0xda, 0x86, 0x62, 0x65, 0x5a, 0xe2, 0x7a, 0xbf, 0xc2, 0x5b, 0x59, 0x27,
	0xfe, 0xfa, 0xf2, 0xff, 0x8d, 0x56, 0xbe, 0xd4, 0xad, 0x93, 0xbf, 0x45, 0xda, 0x0d, 0xd3, 0xd2,
	0xd6, 0x2b, 0xeb, 0x34, 0x2d, 0xcd, 0x3a, 0xa5, 0xb5, 0xb2, 0x4e, 0x6a, 0xad, 0xb1, 0x2e, 0x13,
	0xcc, 0xac, 0xbb, 0xb1, 0xbc, 0xcc, 0xba, 0x7f, 0xaa, 0x4e, 0x5a, 0x57, 0xac, 0xee, 0x7a, 0xeb,
	0x74, 0xad, 0x6b, 0xad, 0x7b, 0x66, 0xbd, 0xaa, 0xfa, 0x71, 0x14, 0x9f, 0x9d, 0xd5, 0xc4, 0x84,
	0x7f, 0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0xd3, 0xf9, 0xfc, 0x11, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigServiceClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	JoinCluster(ctx context.Context, in *RaftNode, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAuth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthConfig, error)
	SetAuth(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*AuthConfig, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.ConfigService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) JoinCluster(ctx context.Context, in *RaftNode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.ConfigService/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetAuth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthConfig, error) {
	out := new(AuthConfig)
	err := c.cc.Invoke(ctx, "/api.ConfigService/GetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SetAuth(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*AuthConfig, error) {
	out := new(AuthConfig)
	err := c.cc.Invoke(ctx, "/api.ConfigService/SetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
type ConfigServiceServer interface {
	Ping(context.Context, *empty.Empty) (*Pong, error)
	JoinCluster(context.Context, *RaftNode) (*empty.Empty, error)
	GetAuth(context.Context, *empty.Empty) (*AuthConfig, error)
	SetAuth(context.Context, *AuthConfig) (*AuthConfig, error)
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).JoinCluster(ctx, req.(*RaftNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/GetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetAuth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/SetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetAuth(ctx, req.(*AuthConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ConfigService_Ping_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _ConfigService_JoinCluster_Handler,
		},
		{
			MethodName: "GetAuth",
			Handler:    _ConfigService_GetAuth_Handler,
		},
		{
			MethodName: "SetAuth",
			Handler:    _ConfigService_SetAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graphik.proto",
}

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphServiceClient interface {
	CreateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	CreateNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error)
	GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error)
	SearchNodes(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Nodes, error)
	PatchNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	PatchNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error)
	DelNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error)
	DelNodes(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error)
	CreateEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	CreateEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error)
	GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error)
	SearchEdges(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Edges, error)
	PatchEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	PatchEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error)
	DelEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error)
	DelEdges(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error)
}

type graphServiceClient struct {
	cc *grpc.ClientConn
}

func NewGraphServiceClient(cc *grpc.ClientConn) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) CreateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchNodes(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelNodes(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchEdges(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelEdges(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
type GraphServiceServer interface {
	CreateNode(context.Context, *Node) (*Node, error)
	CreateNodes(context.Context, *Nodes) (*Nodes, error)
	GetNode(context.Context, *Path) (*Node, error)
	SearchNodes(context.Context, *TypeFilter) (*Nodes, error)
	PatchNode(context.Context, *Node) (*Node, error)
	PatchNodes(context.Context, *Nodes) (*Nodes, error)
	DelNode(context.Context, *Path) (*Counter, error)
	DelNodes(context.Context, *Paths) (*Counter, error)
	CreateEdge(context.Context, *Edge) (*Edge, error)
	CreateEdges(context.Context, *Edges) (*Edges, error)
	GetEdge(context.Context, *Path) (*Edge, error)
	SearchEdges(context.Context, *TypeFilter) (*Edges, error)
	PatchEdge(context.Context, *Edge) (*Edge, error)
	PatchEdges(context.Context, *Edges) (*Edges, error)
	DelEdge(context.Context, *Path) (*Counter, error)
	DelEdges(context.Context, *Paths) (*Counter, error)
}

func RegisterGraphServiceServer(s *grpc.Server, srv GraphServiceServer) {
	s.RegisterService(&_GraphService_serviceDesc, srv)
}

func _GraphService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNodes(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchNodes(ctx, req.(*TypeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNodes(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelNodes(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdges(ctx, req.(*Edges))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchEdges(ctx, req.(*TypeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdges(ctx, req.(*Edges))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelEdges(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _GraphService_CreateNode_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _GraphService_CreateNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _GraphService_GetNode_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _GraphService_SearchNodes_Handler,
		},
		{
			MethodName: "PatchNode",
			Handler:    _GraphService_PatchNode_Handler,
		},
		{
			MethodName: "PatchNodes",
			Handler:    _GraphService_PatchNodes_Handler,
		},
		{
			MethodName: "DelNode",
			Handler:    _GraphService_DelNode_Handler,
		},
		{
			MethodName: "DelNodes",
			Handler:    _GraphService_DelNodes_Handler,
		},
		{
			MethodName: "CreateEdge",
			Handler:    _GraphService_CreateEdge_Handler,
		},
		{
			MethodName: "CreateEdges",
			Handler:    _GraphService_CreateEdges_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _GraphService_GetEdge_Handler,
		},
		{
			MethodName: "SearchEdges",
			Handler:    _GraphService_SearchEdges_Handler,
		},
		{
			MethodName: "PatchEdge",
			Handler:    _GraphService_PatchEdge_Handler,
		},
		{
			MethodName: "PatchEdges",
			Handler:    _GraphService_PatchEdges_Handler,
		},
		{
			MethodName: "DelEdge",
			Handler:    _GraphService_DelEdge_Handler,
		},
		{
			MethodName: "DelEdges",
			Handler:    _GraphService_DelEdges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graphik.proto",
}
