// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: api/graphik.proto

package apipb

import (
	context "context"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Path describes a node/edge type & id
type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gtype is the type of the node/edge ex: pet
	Gtype string `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// gid is the unique id of the node/edge within the context of it's type
	Gid string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{0}
}

func (x *Path) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *Path) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

// Metadata is general metadata collected on nodes/edges
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// created_at is the unix timestamp when the node/edge was created
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is the unix timestamp when the node/edge was last updated
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// updated_by is the identity that last modified the node/edge
	UpdatedBy *Path `protobuf:"bytes,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// sequence is the sequence within the context of the node/edge type
	Sequence uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// version iterates by 1 every time the node/edge is modified
	Version uint64 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Metadata) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Metadata) GetUpdatedBy() *Path {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Metadata) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Metadata) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Paths is an array of paths
type Paths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*Path `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Paths) Reset() {
	*x = Paths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paths) ProtoMessage() {}

func (x *Paths) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paths.ProtoReflect.Descriptor instead.
func (*Paths) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{2}
}

func (x *Paths) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Node is a Graph primitive representing a single entity/resource. It is connected to other nodes via Edges
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the node
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// metadata is general metadata collected about the node
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Node) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Node) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// NodeConstructor is used to create a node
type NodeConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the node. If an id is not provided, a unique id will be generated
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// arbitrary k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *NodeConstructor) Reset() {
	*x = NodeConstructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConstructor) ProtoMessage() {}

func (x *NodeConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConstructor.ProtoReflect.Descriptor instead.
func (*NodeConstructor) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{4}
}

func (x *NodeConstructor) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NodeConstructor) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// NodeConstructor is used to create a batch of nodes
type NodeConstructors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nodes is an array of node constructors
	Nodes []*NodeConstructor `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeConstructors) Reset() {
	*x = NodeConstructors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConstructors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConstructors) ProtoMessage() {}

func (x *NodeConstructors) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConstructors.ProtoReflect.Descriptor instead.
func (*NodeConstructors) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{5}
}

func (x *NodeConstructors) GetNodes() []*NodeConstructor {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Nodes is an array of nodes
type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nodes is an array of nodes
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{6}
}

func (x *Nodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// NodeDetail is a node with its connected edges
type NodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the node
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// arbitrary k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// edges_from are edges that source from this node
	EdgesFrom *EdgeDetails `protobuf:"bytes,3,opt,name=edges_from,json=edgesFrom,proto3" json:"edges_from,omitempty"`
	// edges_to are edges that point toward this node
	EdgesTo *EdgeDetails `protobuf:"bytes,4,opt,name=edges_to,json=edgesTo,proto3" json:"edges_to,omitempty"`
	// metadata is general metadata collected about the node
	Metadata *Metadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *NodeDetail) Reset() {
	*x = NodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetail) ProtoMessage() {}

func (x *NodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetail.ProtoReflect.Descriptor instead.
func (*NodeDetail) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{7}
}

func (x *NodeDetail) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NodeDetail) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *NodeDetail) GetEdgesFrom() *EdgeDetails {
	if x != nil {
		return x.EdgesFrom
	}
	return nil
}

func (x *NodeDetail) GetEdgesTo() *EdgeDetails {
	if x != nil {
		return x.EdgesTo
	}
	return nil
}

func (x *NodeDetail) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// NodeDetails is an array of NodeDetail
type NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeDetails []*NodeDetail `protobuf:"bytes,1,rep,name=node_details,json=nodeDetails,proto3" json:"node_details,omitempty"`
}

func (x *NodeDetails) Reset() {
	*x = NodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetails) ProtoMessage() {}

func (x *NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetails.ProtoReflect.Descriptor instead.
func (*NodeDetails) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{8}
}

func (x *NodeDetails) GetNodeDetails() []*NodeDetail {
	if x != nil {
		return x.NodeDetails
	}
	return nil
}

// NodeDetailFilter is used to fetch node details
type NodeDetailFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the node
	Path      *Path   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	FromEdges *Filter `protobuf:"bytes,2,opt,name=from_edges,json=fromEdges,proto3" json:"from_edges,omitempty"`
	ToEdges   *Filter `protobuf:"bytes,3,opt,name=to_edges,json=toEdges,proto3" json:"to_edges,omitempty"`
}

func (x *NodeDetailFilter) Reset() {
	*x = NodeDetailFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetailFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetailFilter) ProtoMessage() {}

func (x *NodeDetailFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetailFilter.ProtoReflect.Descriptor instead.
func (*NodeDetailFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{9}
}

func (x *NodeDetailFilter) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *NodeDetailFilter) GetFromEdges() *Filter {
	if x != nil {
		return x.FromEdges
	}
	return nil
}

func (x *NodeDetailFilter) GetToEdges() *Filter {
	if x != nil {
		return x.ToEdges
	}
	return nil
}

// Edge is a graph primitive that represents a relationship between two nodes
type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the edge
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// attributes are k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// directed is false if the edge is bi-directional
	Directed bool `protobuf:"varint,3,opt,name=directed,proto3" json:"directed,omitempty"`
	// from is the node path that is the source of the edge
	From *Path `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// to is the node path that is the destination of the edge
	To *Path `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	// metadata is general metadata collected about the edge
	Metadata *Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{10}
}

func (x *Edge) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Edge) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Edge) GetDirected() bool {
	if x != nil {
		return x.Directed
	}
	return false
}

func (x *Edge) GetFrom() *Path {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Edge) GetTo() *Path {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Edge) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// EdgeConstructor is used to create an Edge
type EdgeConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the edge. If an id is not provided, a unique id will be generated
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// attributes are k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// directed is false if the edge is bi-directional
	Directed bool `protobuf:"varint,4,opt,name=directed,proto3" json:"directed,omitempty"`
	// from is the node path that is the root of the edge
	From *Path `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// to is the node path that is the destination of the edge
	To *Path `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *EdgeConstructor) Reset() {
	*x = EdgeConstructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeConstructor) ProtoMessage() {}

func (x *EdgeConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeConstructor.ProtoReflect.Descriptor instead.
func (*EdgeConstructor) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{11}
}

func (x *EdgeConstructor) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *EdgeConstructor) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *EdgeConstructor) GetDirected() bool {
	if x != nil {
		return x.Directed
	}
	return false
}

func (x *EdgeConstructor) GetFrom() *Path {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EdgeConstructor) GetTo() *Path {
	if x != nil {
		return x.To
	}
	return nil
}

// EdgeConstructors is an array of EdgeConstructor
type EdgeConstructors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edges []*EdgeConstructor `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *EdgeConstructors) Reset() {
	*x = EdgeConstructors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeConstructors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeConstructors) ProtoMessage() {}

func (x *EdgeConstructors) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeConstructors.ProtoReflect.Descriptor instead.
func (*EdgeConstructors) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{12}
}

func (x *EdgeConstructors) GetEdges() []*EdgeConstructor {
	if x != nil {
		return x.Edges
	}
	return nil
}

// Edges is an array of Edge
type Edges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edges []*Edge `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *Edges) Reset() {
	*x = Edges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edges) ProtoMessage() {}

func (x *Edges) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edges.ProtoReflect.Descriptor instead.
func (*Edges) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{13}
}

func (x *Edges) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

// EdgeDetail is an edge with both of it's connected nodes fully loaded
type EdgeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the edge
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// attributes are k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// directed is false if the edge is bi-directional
	Directed bool `protobuf:"varint,3,opt,name=directed,proto3" json:"directed,omitempty"`
	// from is the full node that is the root of the edge
	From *Node `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// to is the full node that is the destination of the edge
	To *Node `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	// metadata is general metadata collected about the edge
	Metadata *Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EdgeDetail) Reset() {
	*x = EdgeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeDetail) ProtoMessage() {}

func (x *EdgeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeDetail.ProtoReflect.Descriptor instead.
func (*EdgeDetail) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{14}
}

func (x *EdgeDetail) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *EdgeDetail) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *EdgeDetail) GetDirected() bool {
	if x != nil {
		return x.Directed
	}
	return false
}

func (x *EdgeDetail) GetFrom() *Node {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *EdgeDetail) GetTo() *Node {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *EdgeDetail) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// EdgeDetails is an array of EdgeDetail
type EdgeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edges []*EdgeDetail `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *EdgeDetails) Reset() {
	*x = EdgeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeDetails) ProtoMessage() {}

func (x *EdgeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeDetails.ProtoReflect.Descriptor instead.
func (*EdgeDetails) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{15}
}

func (x *EdgeDetails) GetEdges() []*EdgeDetail {
	if x != nil {
		return x.Edges
	}
	return nil
}

// EdgeFilter is used to fetch edges related to a single noted
type EdgeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// node_path is the path to the target node
	NodePath *Path `protobuf:"bytes,1,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	// gtype is the type of edges to return
	Gtype string `protobuf:"bytes,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// expressions are CEL expressions used to filter edges
	Expressions []string `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	// limit is the maximum number of edges to return
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *EdgeFilter) Reset() {
	*x = EdgeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeFilter) ProtoMessage() {}

func (x *EdgeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeFilter.ProtoReflect.Descriptor instead.
func (*EdgeFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{16}
}

func (x *EdgeFilter) GetNodePath() *Path {
	if x != nil {
		return x.NodePath
	}
	return nil
}

func (x *EdgeFilter) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *EdgeFilter) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *EdgeFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Filter is a generic filter using Common Expression Language
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gtype is the node/edge type to be filtered
	Gtype string `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// expressions are CEL expressions used to filter edges
	Expressions []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	// limit is the maximum number of items to return
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{17}
}

func (x *Filter) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *Filter) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *Filter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// MeFilter is used to fetch a NodeDetail representing the identity in the inbound JWT token
type MeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// edges_from is a filter used to filter edges from the identity making the request
	EdgesFrom *Filter `protobuf:"bytes,1,opt,name=edges_from,json=edgesFrom,proto3" json:"edges_from,omitempty"`
	// edges_to is a filter used to filter edges to the identity making the request
	EdgesTo *Filter `protobuf:"bytes,2,opt,name=edges_to,json=edgesTo,proto3" json:"edges_to,omitempty"`
}

func (x *MeFilter) Reset() {
	*x = MeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeFilter) ProtoMessage() {}

func (x *MeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeFilter.ProtoReflect.Descriptor instead.
func (*MeFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{18}
}

func (x *MeFilter) GetEdgesFrom() *Filter {
	if x != nil {
		return x.EdgesFrom
	}
	return nil
}

func (x *MeFilter) GetEdgesTo() *Filter {
	if x != nil {
		return x.EdgesTo
	}
	return nil
}

// ChannelFilter is used to filter messages in a pubsub channel
type ChannelFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel is the target channel to filter from
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// expressions are CEL expressions used to filter messages
	Expressions []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *ChannelFilter) Reset() {
	*x = ChannelFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFilter) ProtoMessage() {}

func (x *ChannelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFilter.ProtoReflect.Descriptor instead.
func (*ChannelFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelFilter) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ChannelFilter) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

// SubGraphFilter is used to filter nodes/edges in the graph
type SubGraphFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// node_filter is a filter used to filter nodes in the graph
	NodeFilter *Filter `protobuf:"bytes,1,opt,name=node_filter,json=nodeFilter,proto3" json:"node_filter,omitempty"`
	// edge_filter is a filter used to filter the edges of each node returned by the node_filter
	EdgeFilter *Filter `protobuf:"bytes,2,opt,name=edge_filter,json=edgeFilter,proto3" json:"edge_filter,omitempty"`
}

func (x *SubGraphFilter) Reset() {
	*x = SubGraphFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubGraphFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGraphFilter) ProtoMessage() {}

func (x *SubGraphFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGraphFilter.ProtoReflect.Descriptor instead.
func (*SubGraphFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{20}
}

func (x *SubGraphFilter) GetNodeFilter() *Filter {
	if x != nil {
		return x.NodeFilter
	}
	return nil
}

func (x *SubGraphFilter) GetEdgeFilter() *Filter {
	if x != nil {
		return x.EdgeFilter
	}
	return nil
}

// Graph is an array of nodes and edges
type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// nodes are nodes present in the graph
	Nodes *Nodes `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// edges are edges present in the graph
	Edges *Edges `protobuf:"bytes,2,opt,name=edges,proto3" json:"edges,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{21}
}

func (x *Graph) GetNodes() *Nodes {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Graph) GetEdges() *Edges {
	if x != nil {
		return x.Edges
	}
	return nil
}

// Patch patches the attributes of a Node or Edge
type Patch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the path to the target node/edge to patch
	Path *Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// attributes are k/v pairs used to overwrite k/v pairs on a node/edge
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Patch) Reset() {
	*x = Patch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patch) ProtoMessage() {}

func (x *Patch) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patch.ProtoReflect.Descriptor instead.
func (*Patch) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{22}
}

func (x *Patch) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Patch) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// PatchFilter is used to patch nodes/edges
type PatchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter is used to filter nodes/edges to patch
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// attributes are k/v pairs used to overwrite k/v pairs on all nodes/edges that pass the filter
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PatchFilter) Reset() {
	*x = PatchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchFilter) ProtoMessage() {}

func (x *PatchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchFilter.ProtoReflect.Descriptor instead.
func (*PatchFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{23}
}

func (x *PatchFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *PatchFilter) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Pong returns PONG if the server is healthy
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message returns PONG if healthy
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{24}
}

func (x *Pong) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// OutboundMessage is a message to be published to a pubsub channel
type OutboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel is the target channel to send the message to
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// data is the data to send with the message
	Data *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OutboundMessage) Reset() {
	*x = OutboundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessage) ProtoMessage() {}

func (x *OutboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessage.ProtoReflect.Descriptor instead.
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{25}
}

func (x *OutboundMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *OutboundMessage) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// Message is received on PubSub subscriptions
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel is the channel the message was sent to
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// data is the data sent with the message
	Data *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// sender is the identity that sent the message
	Sender *Path `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	// timestamp is when the message was sent
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{26}
}

func (x *Message) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Message) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetSender() *Path {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Message) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Schema returns registered edge & node types
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// edge_types are the types of edges in the graph
	EdgeTypes []string `protobuf:"bytes,1,rep,name=edge_types,json=edgeTypes,proto3" json:"edge_types,omitempty"`
	// node_types are the types of nodes in the graph
	NodeTypes []string `protobuf:"bytes,2,rep,name=node_types,json=nodeTypes,proto3" json:"node_types,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{27}
}

func (x *Schema) GetEdgeTypes() []string {
	if x != nil {
		return x.EdgeTypes
	}
	return nil
}

func (x *Schema) GetNodeTypes() []string {
	if x != nil {
		return x.NodeTypes
	}
	return nil
}

// NodeChange is a single state change to a node
type NodeChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// before is the node before state change
	Before *Node `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	// after is the node after state change
	After *Node `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *NodeChange) Reset() {
	*x = NodeChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeChange) ProtoMessage() {}

func (x *NodeChange) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeChange.ProtoReflect.Descriptor instead.
func (*NodeChange) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{28}
}

func (x *NodeChange) GetBefore() *Node {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *NodeChange) GetAfter() *Node {
	if x != nil {
		return x.After
	}
	return nil
}

type EdgeChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *Edge `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	After  *Edge `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *EdgeChange) Reset() {
	*x = EdgeChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeChange) ProtoMessage() {}

func (x *EdgeChange) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeChange.ProtoReflect.Descriptor instead.
func (*EdgeChange) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{29}
}

func (x *EdgeChange) GetBefore() *Edge {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *EdgeChange) GetAfter() *Edge {
	if x != nil {
		return x.After
	}
	return nil
}

// Change represents a set of state changes in the graph
type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method is the gRPC method invoked
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// identity is the identity invoking the change
	Identity *Node `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// timestamp is when the change was made
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// edge_changes are state changes to edges
	EdgeChanges []*EdgeChange `protobuf:"bytes,4,rep,name=edge_changes,json=edgeChanges,proto3" json:"edge_changes,omitempty"`
	// node_changes are state changes to nodes
	NodeChanges []*NodeChange `protobuf:"bytes,5,rep,name=node_changes,json=nodeChanges,proto3" json:"node_changes,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{30}
}

func (x *Change) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Change) GetIdentity() *Node {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Change) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Change) GetEdgeChanges() []*EdgeChange {
	if x != nil {
		return x.EdgeChanges
	}
	return nil
}

func (x *Change) GetNodeChanges() []*NodeChange {
	if x != nil {
		return x.NodeChanges
	}
	return nil
}

type ExpressionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// expressions are CEL expressions used to filter edges
	Expressions []string `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *ExpressionFilter) Reset() {
	*x = ExpressionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionFilter) ProtoMessage() {}

func (x *ExpressionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionFilter.ProtoReflect.Descriptor instead.
func (*ExpressionFilter) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{31}
}

func (x *ExpressionFilter) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method is the rpc method
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// identity is the identity making the request
	Identity *Node `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// timestamp is when the intercept was received
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// request is the intercepted request
	Request *_struct.Struct `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_graphik_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_graphik_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_api_graphik_proto_rawDescGZIP(), []int{32}
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetIdentity() *Node {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Request) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Request) GetRequest() *_struct.Struct {
	if x != nil {
		return x.Request
	}
	return nil
}

var File_api_graphik_proto protoreflect.FileDescriptor

var file_api_graphik_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74,
	0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24,
	0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x22,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x0f, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3e, 0x0a,
	0x10, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x28, 0x0a,
	0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x73, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x74, 0x6f, 0x45, 0x64, 0x67, 0x65, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x04, 0x45,
	0x64, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x01, 0x0a,
	0x0f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x10, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x05, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x22, 0x85, 0x02, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf,
	0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24,
	0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x08, 0x4d, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x26, 0x0a, 0x08, 0x65, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x22, 0x5d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a,
	0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x20, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x22, 0x67, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2,
	0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd7, 0x01,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c,
	0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x50, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x22, 0x50, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x22, 0x8b, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0c, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x34, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c,
	0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0xe4, 0x08, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x02, 0x4d, 0x65, 0x12, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x21, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x24, 0x0a,
	0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x09, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x64, 0x67, 0x65,
	0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x09, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x07, 0x45, 0x64, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x22, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x0a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x06, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x53,
	0x75, 0x62, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75,
	0x62, 0x47, 0x72, 0x61, 0x70, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x9e, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x06, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_graphik_proto_rawDescOnce sync.Once
	file_api_graphik_proto_rawDescData = file_api_graphik_proto_rawDesc
)

func file_api_graphik_proto_rawDescGZIP() []byte {
	file_api_graphik_proto_rawDescOnce.Do(func() {
		file_api_graphik_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_graphik_proto_rawDescData)
	})
	return file_api_graphik_proto_rawDescData
}

var file_api_graphik_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_api_graphik_proto_goTypes = []interface{}{
	(*Path)(nil),                // 0: api.Path
	(*Metadata)(nil),            // 1: api.Metadata
	(*Paths)(nil),               // 2: api.Paths
	(*Node)(nil),                // 3: api.Node
	(*NodeConstructor)(nil),     // 4: api.NodeConstructor
	(*NodeConstructors)(nil),    // 5: api.NodeConstructors
	(*Nodes)(nil),               // 6: api.Nodes
	(*NodeDetail)(nil),          // 7: api.NodeDetail
	(*NodeDetails)(nil),         // 8: api.NodeDetails
	(*NodeDetailFilter)(nil),    // 9: api.NodeDetailFilter
	(*Edge)(nil),                // 10: api.Edge
	(*EdgeConstructor)(nil),     // 11: api.EdgeConstructor
	(*EdgeConstructors)(nil),    // 12: api.EdgeConstructors
	(*Edges)(nil),               // 13: api.Edges
	(*EdgeDetail)(nil),          // 14: api.EdgeDetail
	(*EdgeDetails)(nil),         // 15: api.EdgeDetails
	(*EdgeFilter)(nil),          // 16: api.EdgeFilter
	(*Filter)(nil),              // 17: api.Filter
	(*MeFilter)(nil),            // 18: api.MeFilter
	(*ChannelFilter)(nil),       // 19: api.ChannelFilter
	(*SubGraphFilter)(nil),      // 20: api.SubGraphFilter
	(*Graph)(nil),               // 21: api.Graph
	(*Patch)(nil),               // 22: api.Patch
	(*PatchFilter)(nil),         // 23: api.PatchFilter
	(*Pong)(nil),                // 24: api.Pong
	(*OutboundMessage)(nil),     // 25: api.OutboundMessage
	(*Message)(nil),             // 26: api.Message
	(*Schema)(nil),              // 27: api.Schema
	(*NodeChange)(nil),          // 28: api.NodeChange
	(*EdgeChange)(nil),          // 29: api.EdgeChange
	(*Change)(nil),              // 30: api.Change
	(*ExpressionFilter)(nil),    // 31: api.ExpressionFilter
	(*Request)(nil),             // 32: api.Request
	(*timestamp.Timestamp)(nil), // 33: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 34: google.protobuf.Struct
	(*empty.Empty)(nil),         // 35: google.protobuf.Empty
}
var file_api_graphik_proto_depIdxs = []int32{
	33, // 0: api.Metadata.created_at:type_name -> google.protobuf.Timestamp
	33, // 1: api.Metadata.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: api.Metadata.updated_by:type_name -> api.Path
	0,  // 3: api.Paths.paths:type_name -> api.Path
	0,  // 4: api.Node.path:type_name -> api.Path
	34, // 5: api.Node.attributes:type_name -> google.protobuf.Struct
	1,  // 6: api.Node.metadata:type_name -> api.Metadata
	0,  // 7: api.NodeConstructor.path:type_name -> api.Path
	34, // 8: api.NodeConstructor.attributes:type_name -> google.protobuf.Struct
	4,  // 9: api.NodeConstructors.nodes:type_name -> api.NodeConstructor
	3,  // 10: api.Nodes.nodes:type_name -> api.Node
	0,  // 11: api.NodeDetail.path:type_name -> api.Path
	34, // 12: api.NodeDetail.attributes:type_name -> google.protobuf.Struct
	15, // 13: api.NodeDetail.edges_from:type_name -> api.EdgeDetails
	15, // 14: api.NodeDetail.edges_to:type_name -> api.EdgeDetails
	1,  // 15: api.NodeDetail.metadata:type_name -> api.Metadata
	7,  // 16: api.NodeDetails.node_details:type_name -> api.NodeDetail
	0,  // 17: api.NodeDetailFilter.path:type_name -> api.Path
	17, // 18: api.NodeDetailFilter.from_edges:type_name -> api.Filter
	17, // 19: api.NodeDetailFilter.to_edges:type_name -> api.Filter
	0,  // 20: api.Edge.path:type_name -> api.Path
	34, // 21: api.Edge.attributes:type_name -> google.protobuf.Struct
	0,  // 22: api.Edge.from:type_name -> api.Path
	0,  // 23: api.Edge.to:type_name -> api.Path
	1,  // 24: api.Edge.metadata:type_name -> api.Metadata
	0,  // 25: api.EdgeConstructor.path:type_name -> api.Path
	34, // 26: api.EdgeConstructor.attributes:type_name -> google.protobuf.Struct
	0,  // 27: api.EdgeConstructor.from:type_name -> api.Path
	0,  // 28: api.EdgeConstructor.to:type_name -> api.Path
	11, // 29: api.EdgeConstructors.edges:type_name -> api.EdgeConstructor
	10, // 30: api.Edges.edges:type_name -> api.Edge
	0,  // 31: api.EdgeDetail.path:type_name -> api.Path
	34, // 32: api.EdgeDetail.attributes:type_name -> google.protobuf.Struct
	3,  // 33: api.EdgeDetail.from:type_name -> api.Node
	3,  // 34: api.EdgeDetail.to:type_name -> api.Node
	1,  // 35: api.EdgeDetail.metadata:type_name -> api.Metadata
	14, // 36: api.EdgeDetails.edges:type_name -> api.EdgeDetail
	0,  // 37: api.EdgeFilter.node_path:type_name -> api.Path
	17, // 38: api.MeFilter.edges_from:type_name -> api.Filter
	17, // 39: api.MeFilter.edges_to:type_name -> api.Filter
	17, // 40: api.SubGraphFilter.node_filter:type_name -> api.Filter
	17, // 41: api.SubGraphFilter.edge_filter:type_name -> api.Filter
	6,  // 42: api.Graph.nodes:type_name -> api.Nodes
	13, // 43: api.Graph.edges:type_name -> api.Edges
	0,  // 44: api.Patch.path:type_name -> api.Path
	34, // 45: api.Patch.attributes:type_name -> google.protobuf.Struct
	17, // 46: api.PatchFilter.filter:type_name -> api.Filter
	34, // 47: api.PatchFilter.attributes:type_name -> google.protobuf.Struct
	34, // 48: api.OutboundMessage.data:type_name -> google.protobuf.Struct
	34, // 49: api.Message.data:type_name -> google.protobuf.Struct
	0,  // 50: api.Message.sender:type_name -> api.Path
	33, // 51: api.Message.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 52: api.NodeChange.before:type_name -> api.Node
	3,  // 53: api.NodeChange.after:type_name -> api.Node
	10, // 54: api.EdgeChange.before:type_name -> api.Edge
	10, // 55: api.EdgeChange.after:type_name -> api.Edge
	3,  // 56: api.Change.identity:type_name -> api.Node
	33, // 57: api.Change.timestamp:type_name -> google.protobuf.Timestamp
	29, // 58: api.Change.edge_changes:type_name -> api.EdgeChange
	28, // 59: api.Change.node_changes:type_name -> api.NodeChange
	3,  // 60: api.Request.identity:type_name -> api.Node
	33, // 61: api.Request.timestamp:type_name -> google.protobuf.Timestamp
	34, // 62: api.Request.request:type_name -> google.protobuf.Struct
	35, // 63: api.GraphService.Ping:input_type -> google.protobuf.Empty
	35, // 64: api.GraphService.GetSchema:input_type -> google.protobuf.Empty
	18, // 65: api.GraphService.Me:input_type -> api.MeFilter
	4,  // 66: api.GraphService.CreateNode:input_type -> api.NodeConstructor
	5,  // 67: api.GraphService.CreateNodes:input_type -> api.NodeConstructors
	0,  // 68: api.GraphService.GetNode:input_type -> api.Path
	17, // 69: api.GraphService.SearchNodes:input_type -> api.Filter
	22, // 70: api.GraphService.PatchNode:input_type -> api.Patch
	23, // 71: api.GraphService.PatchNodes:input_type -> api.PatchFilter
	11, // 72: api.GraphService.CreateEdge:input_type -> api.EdgeConstructor
	12, // 73: api.GraphService.CreateEdges:input_type -> api.EdgeConstructors
	0,  // 74: api.GraphService.GetEdge:input_type -> api.Path
	17, // 75: api.GraphService.SearchEdges:input_type -> api.Filter
	22, // 76: api.GraphService.PatchEdge:input_type -> api.Patch
	23, // 77: api.GraphService.PatchEdges:input_type -> api.PatchFilter
	16, // 78: api.GraphService.EdgesFrom:input_type -> api.EdgeFilter
	16, // 79: api.GraphService.EdgesTo:input_type -> api.EdgeFilter
	25, // 80: api.GraphService.Publish:input_type -> api.OutboundMessage
	19, // 81: api.GraphService.Subscribe:input_type -> api.ChannelFilter
	31, // 82: api.GraphService.SubscribeChanges:input_type -> api.ExpressionFilter
	21, // 83: api.GraphService.Import:input_type -> api.Graph
	35, // 84: api.GraphService.Export:input_type -> google.protobuf.Empty
	20, // 85: api.GraphService.SubGraph:input_type -> api.SubGraphFilter
	35, // 86: api.GraphService.Shutdown:input_type -> google.protobuf.Empty
	35, // 87: api.TriggerService.Ping:input_type -> google.protobuf.Empty
	30, // 88: api.TriggerService.Mutate:input_type -> api.Change
	35, // 89: api.TriggerService.Filter:input_type -> google.protobuf.Empty
	24, // 90: api.GraphService.Ping:output_type -> api.Pong
	27, // 91: api.GraphService.GetSchema:output_type -> api.Schema
	7,  // 92: api.GraphService.Me:output_type -> api.NodeDetail
	3,  // 93: api.GraphService.CreateNode:output_type -> api.Node
	6,  // 94: api.GraphService.CreateNodes:output_type -> api.Nodes
	3,  // 95: api.GraphService.GetNode:output_type -> api.Node
	6,  // 96: api.GraphService.SearchNodes:output_type -> api.Nodes
	3,  // 97: api.GraphService.PatchNode:output_type -> api.Node
	6,  // 98: api.GraphService.PatchNodes:output_type -> api.Nodes
	10, // 99: api.GraphService.CreateEdge:output_type -> api.Edge
	13, // 100: api.GraphService.CreateEdges:output_type -> api.Edges
	10, // 101: api.GraphService.GetEdge:output_type -> api.Edge
	13, // 102: api.GraphService.SearchEdges:output_type -> api.Edges
	10, // 103: api.GraphService.PatchEdge:output_type -> api.Edge
	13, // 104: api.GraphService.PatchEdges:output_type -> api.Edges
	13, // 105: api.GraphService.EdgesFrom:output_type -> api.Edges
	13, // 106: api.GraphService.EdgesTo:output_type -> api.Edges
	35, // 107: api.GraphService.Publish:output_type -> google.protobuf.Empty
	26, // 108: api.GraphService.Subscribe:output_type -> api.Message
	30, // 109: api.GraphService.SubscribeChanges:output_type -> api.Change
	21, // 110: api.GraphService.Import:output_type -> api.Graph
	21, // 111: api.GraphService.Export:output_type -> api.Graph
	21, // 112: api.GraphService.SubGraph:output_type -> api.Graph
	35, // 113: api.GraphService.Shutdown:output_type -> google.protobuf.Empty
	24, // 114: api.TriggerService.Ping:output_type -> api.Pong
	30, // 115: api.TriggerService.Mutate:output_type -> api.Change
	31, // 116: api.TriggerService.Filter:output_type -> api.ExpressionFilter
	90, // [90:117] is the sub-list for method output_type
	63, // [63:90] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_api_graphik_proto_init() }
func file_api_graphik_proto_init() {
	if File_api_graphik_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_graphik_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConstructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConstructors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetailFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeConstructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeConstructors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubGraphFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_graphik_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_graphik_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_graphik_proto_goTypes,
		DependencyIndexes: file_api_graphik_proto_depIdxs,
		MessageInfos:      file_api_graphik_proto_msgTypes,
	}.Build()
	File_api_graphik_proto = out.File
	file_api_graphik_proto_rawDesc = nil
	file_api_graphik_proto_goTypes = nil
	file_api_graphik_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphServiceClient interface {
	// Ping returns PONG if the server is health
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	// GetSchema gets schema about the Graph node & edge types
	GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Schema, error)
	// Me returns a NodeDetail of the currently logged in identity(the subject of the JWT)
	Me(ctx context.Context, in *MeFilter, opts ...grpc.CallOption) (*NodeDetail, error)
	// CreateNode creates a node in the graph
	CreateNode(ctx context.Context, in *NodeConstructor, opts ...grpc.CallOption) (*Node, error)
	// CreateNodes creates a batch of nodes in the graph
	CreateNodes(ctx context.Context, in *NodeConstructors, opts ...grpc.CallOption) (*Nodes, error)
	// GetNode gets a single node in the graph
	GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error)
	// SearchNodes searches the graph for nodes
	SearchNodes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Nodes, error)
	// PatchNode patches a nodes attributes
	PatchNode(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Node, error)
	// PatchNodes patches a batch of nodes attributes
	PatchNodes(ctx context.Context, in *PatchFilter, opts ...grpc.CallOption) (*Nodes, error)
	// CreateEdge creates an edge in the graph
	CreateEdge(ctx context.Context, in *EdgeConstructor, opts ...grpc.CallOption) (*Edge, error)
	// CreateEdges creates a batch of edges in the graph
	CreateEdges(ctx context.Context, in *EdgeConstructors, opts ...grpc.CallOption) (*Edges, error)
	// GetEdge gets a single edge in the graph
	GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error)
	// SearchEdges searches the graph for edges
	SearchEdges(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Edges, error)
	// PatchEdge patches an edges attributes
	PatchEdge(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Edge, error)
	// PatchEdges patches a batch of edges attributes
	PatchEdges(ctx context.Context, in *PatchFilter, opts ...grpc.CallOption) (*Edges, error)
	// EdgesFrom returns edges that source from the given node path that pass the filter
	EdgesFrom(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error)
	// EdgesTo returns edges that point to the given node path that pass the filter
	EdgesTo(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error)
	// Publish publishes a message to a pubsub channel
	Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	// Subscribe subscribes to messages on a pubsub channel
	Subscribe(ctx context.Context, in *ChannelFilter, opts ...grpc.CallOption) (GraphService_SubscribeClient, error)
	SubscribeChanges(ctx context.Context, in *ExpressionFilter, opts ...grpc.CallOption) (GraphService_SubscribeChangesClient, error)
	// Import imports the Graph into the database
	Import(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*Graph, error)
	// Export returns the Graph data
	Export(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Graph, error)
	// SubGraph returns a subgraph using the given filter
	SubGraph(ctx context.Context, in *SubGraphFilter, opts ...grpc.CallOption) (*Graph, error)
	// Shutdown shuts down the database
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type graphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphServiceClient(cc grpc.ClientConnInterface) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.GraphService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Me(ctx context.Context, in *MeFilter, opts ...grpc.CallOption) (*NodeDetail, error) {
	out := new(NodeDetail)
	err := c.cc.Invoke(ctx, "/api.GraphService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNode(ctx context.Context, in *NodeConstructor, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNodes(ctx context.Context, in *NodeConstructors, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchNodes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNode(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNodes(ctx context.Context, in *PatchFilter, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdge(ctx context.Context, in *EdgeConstructor, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdges(ctx context.Context, in *EdgeConstructors, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchEdges(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdge(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdges(ctx context.Context, in *PatchFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) EdgesFrom(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/EdgesFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) EdgesTo(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/EdgesTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Subscribe(ctx context.Context, in *ChannelFilter, opts ...grpc.CallOption) (GraphService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GraphService_serviceDesc.Streams[0], "/api.GraphService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type graphServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *graphServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphServiceClient) SubscribeChanges(ctx context.Context, in *ExpressionFilter, opts ...grpc.CallOption) (GraphService_SubscribeChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GraphService_serviceDesc.Streams[1], "/api.GraphService/SubscribeChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphServiceSubscribeChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphService_SubscribeChangesClient interface {
	Recv() (*Change, error)
	grpc.ClientStream
}

type graphServiceSubscribeChangesClient struct {
	grpc.ClientStream
}

func (x *graphServiceSubscribeChangesClient) Recv() (*Change, error) {
	m := new(Change)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphServiceClient) Import(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/api.GraphService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Export(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/api.GraphService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SubGraph(ctx context.Context, in *SubGraphFilter, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/api.GraphService/SubGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
type GraphServiceServer interface {
	// Ping returns PONG if the server is health
	Ping(context.Context, *empty.Empty) (*Pong, error)
	// GetSchema gets schema about the Graph node & edge types
	GetSchema(context.Context, *empty.Empty) (*Schema, error)
	// Me returns a NodeDetail of the currently logged in identity(the subject of the JWT)
	Me(context.Context, *MeFilter) (*NodeDetail, error)
	// CreateNode creates a node in the graph
	CreateNode(context.Context, *NodeConstructor) (*Node, error)
	// CreateNodes creates a batch of nodes in the graph
	CreateNodes(context.Context, *NodeConstructors) (*Nodes, error)
	// GetNode gets a single node in the graph
	GetNode(context.Context, *Path) (*Node, error)
	// SearchNodes searches the graph for nodes
	SearchNodes(context.Context, *Filter) (*Nodes, error)
	// PatchNode patches a nodes attributes
	PatchNode(context.Context, *Patch) (*Node, error)
	// PatchNodes patches a batch of nodes attributes
	PatchNodes(context.Context, *PatchFilter) (*Nodes, error)
	// CreateEdge creates an edge in the graph
	CreateEdge(context.Context, *EdgeConstructor) (*Edge, error)
	// CreateEdges creates a batch of edges in the graph
	CreateEdges(context.Context, *EdgeConstructors) (*Edges, error)
	// GetEdge gets a single edge in the graph
	GetEdge(context.Context, *Path) (*Edge, error)
	// SearchEdges searches the graph for edges
	SearchEdges(context.Context, *Filter) (*Edges, error)
	// PatchEdge patches an edges attributes
	PatchEdge(context.Context, *Patch) (*Edge, error)
	// PatchEdges patches a batch of edges attributes
	PatchEdges(context.Context, *PatchFilter) (*Edges, error)
	// EdgesFrom returns edges that source from the given node path that pass the filter
	EdgesFrom(context.Context, *EdgeFilter) (*Edges, error)
	// EdgesTo returns edges that point to the given node path that pass the filter
	EdgesTo(context.Context, *EdgeFilter) (*Edges, error)
	// Publish publishes a message to a pubsub channel
	Publish(context.Context, *OutboundMessage) (*empty.Empty, error)
	// Subscribe subscribes to messages on a pubsub channel
	Subscribe(*ChannelFilter, GraphService_SubscribeServer) error
	SubscribeChanges(*ExpressionFilter, GraphService_SubscribeChangesServer) error
	// Import imports the Graph into the database
	Import(context.Context, *Graph) (*Graph, error)
	// Export returns the Graph data
	Export(context.Context, *empty.Empty) (*Graph, error)
	// SubGraph returns a subgraph using the given filter
	SubGraph(context.Context, *SubGraphFilter) (*Graph, error)
	// Shutdown shuts down the database
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedGraphServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGraphServiceServer struct {
}

func (*UnimplementedGraphServiceServer) Ping(context.Context, *empty.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGraphServiceServer) GetSchema(context.Context, *empty.Empty) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedGraphServiceServer) Me(context.Context, *MeFilter) (*NodeDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (*UnimplementedGraphServiceServer) CreateNode(context.Context, *NodeConstructor) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (*UnimplementedGraphServiceServer) CreateNodes(context.Context, *NodeConstructors) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (*UnimplementedGraphServiceServer) GetNode(context.Context, *Path) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedGraphServiceServer) SearchNodes(context.Context, *Filter) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodes not implemented")
}
func (*UnimplementedGraphServiceServer) PatchNode(context.Context, *Patch) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchNode not implemented")
}
func (*UnimplementedGraphServiceServer) PatchNodes(context.Context, *PatchFilter) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchNodes not implemented")
}
func (*UnimplementedGraphServiceServer) CreateEdge(context.Context, *EdgeConstructor) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdge not implemented")
}
func (*UnimplementedGraphServiceServer) CreateEdges(context.Context, *EdgeConstructors) (*Edges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdges not implemented")
}
func (*UnimplementedGraphServiceServer) GetEdge(context.Context, *Path) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdge not implemented")
}
func (*UnimplementedGraphServiceServer) SearchEdges(context.Context, *Filter) (*Edges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEdges not implemented")
}
func (*UnimplementedGraphServiceServer) PatchEdge(context.Context, *Patch) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEdge not implemented")
}
func (*UnimplementedGraphServiceServer) PatchEdges(context.Context, *PatchFilter) (*Edges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEdges not implemented")
}
func (*UnimplementedGraphServiceServer) EdgesFrom(context.Context, *EdgeFilter) (*Edges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EdgesFrom not implemented")
}
func (*UnimplementedGraphServiceServer) EdgesTo(context.Context, *EdgeFilter) (*Edges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EdgesTo not implemented")
}
func (*UnimplementedGraphServiceServer) Publish(context.Context, *OutboundMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedGraphServiceServer) Subscribe(*ChannelFilter, GraphService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedGraphServiceServer) SubscribeChanges(*ExpressionFilter, GraphService_SubscribeChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChanges not implemented")
}
func (*UnimplementedGraphServiceServer) Import(context.Context, *Graph) (*Graph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (*UnimplementedGraphServiceServer) Export(context.Context, *empty.Empty) (*Graph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (*UnimplementedGraphServiceServer) SubGraph(context.Context, *SubGraphFilter) (*Graph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubGraph not implemented")
}
func (*UnimplementedGraphServiceServer) Shutdown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterGraphServiceServer(s *grpc.Server, srv GraphServiceServer) {
	s.RegisterService(&_GraphService_serviceDesc, srv)
}

func _GraphService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetSchema(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Me(ctx, req.(*MeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConstructor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNode(ctx, req.(*NodeConstructor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConstructors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNodes(ctx, req.(*NodeConstructors))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchNodes(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNode(ctx, req.(*Patch))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNodes(ctx, req.(*PatchFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeConstructor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdge(ctx, req.(*EdgeConstructor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeConstructors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdges(ctx, req.(*EdgeConstructors))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchEdges(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdge(ctx, req.(*Patch))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdges(ctx, req.(*PatchFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_EdgesFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).EdgesFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/EdgesFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).EdgesFrom(ctx, req.(*EdgeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_EdgesTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).EdgesTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/EdgesTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).EdgesTo(ctx, req.(*EdgeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Publish(ctx, req.(*OutboundMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServiceServer).Subscribe(m, &graphServiceSubscribeServer{stream})
}

type GraphService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type graphServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *graphServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _GraphService_SubscribeChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpressionFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServiceServer).SubscribeChanges(m, &graphServiceSubscribeChangesServer{stream})
}

type GraphService_SubscribeChangesServer interface {
	Send(*Change) error
	grpc.ServerStream
}

type graphServiceSubscribeChangesServer struct {
	grpc.ServerStream
}

func (x *graphServiceSubscribeChangesServer) Send(m *Change) error {
	return x.ServerStream.SendMsg(m)
}

func _GraphService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Graph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Import(ctx, req.(*Graph))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Export(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SubGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubGraphFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SubGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SubGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SubGraph(ctx, req.(*SubGraphFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GraphService_Ping_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _GraphService_GetSchema_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _GraphService_Me_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _GraphService_CreateNode_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _GraphService_CreateNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _GraphService_GetNode_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _GraphService_SearchNodes_Handler,
		},
		{
			MethodName: "PatchNode",
			Handler:    _GraphService_PatchNode_Handler,
		},
		{
			MethodName: "PatchNodes",
			Handler:    _GraphService_PatchNodes_Handler,
		},
		{
			MethodName: "CreateEdge",
			Handler:    _GraphService_CreateEdge_Handler,
		},
		{
			MethodName: "CreateEdges",
			Handler:    _GraphService_CreateEdges_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _GraphService_GetEdge_Handler,
		},
		{
			MethodName: "SearchEdges",
			Handler:    _GraphService_SearchEdges_Handler,
		},
		{
			MethodName: "PatchEdge",
			Handler:    _GraphService_PatchEdge_Handler,
		},
		{
			MethodName: "PatchEdges",
			Handler:    _GraphService_PatchEdges_Handler,
		},
		{
			MethodName: "EdgesFrom",
			Handler:    _GraphService_EdgesFrom_Handler,
		},
		{
			MethodName: "EdgesTo",
			Handler:    _GraphService_EdgesTo_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _GraphService_Publish_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _GraphService_Import_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _GraphService_Export_Handler,
		},
		{
			MethodName: "SubGraph",
			Handler:    _GraphService_SubGraph_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _GraphService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _GraphService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChanges",
			Handler:       _GraphService_SubscribeChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/graphik.proto",
}

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// Ping returns PONG if the server is health
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	// Mutate mutates state changes before they are commited
	Mutate(ctx context.Context, in *Change, opts ...grpc.CallOption) (*Change, error)
	// Filter returns a set of expressions used to determine whether the request/response will be sent to the Mutation function.
	// These expressions are cached by the Graphik server
	Filter(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ExpressionFilter, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.TriggerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) Mutate(ctx context.Context, in *Change, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/api.TriggerService/Mutate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) Filter(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ExpressionFilter, error) {
	out := new(ExpressionFilter)
	err := c.cc.Invoke(ctx, "/api.TriggerService/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
type TriggerServiceServer interface {
	// Ping returns PONG if the server is health
	Ping(context.Context, *empty.Empty) (*Pong, error)
	// Mutate mutates state changes before they are commited
	Mutate(context.Context, *Change) (*Change, error)
	// Filter returns a set of expressions used to determine whether the request/response will be sent to the Mutation function.
	// These expressions are cached by the Graphik server
	Filter(context.Context, *empty.Empty) (*ExpressionFilter, error)
}

// UnimplementedTriggerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (*UnimplementedTriggerServiceServer) Ping(context.Context, *empty.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTriggerServiceServer) Mutate(context.Context, *Change) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}
func (*UnimplementedTriggerServiceServer) Filter(context.Context, *empty.Empty) (*ExpressionFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}

func RegisterTriggerServiceServer(s *grpc.Server, srv TriggerServiceServer) {
	s.RegisterService(&_TriggerService_serviceDesc, srv)
}

func _TriggerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TriggerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Change)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TriggerService/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Mutate(ctx, req.(*Change))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TriggerService/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Filter(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TriggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TriggerService_Ping_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _TriggerService_Mutate_Handler,
		},
		{
			MethodName: "Filter",
			Handler:    _TriggerService_Filter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graphik.proto",
}
