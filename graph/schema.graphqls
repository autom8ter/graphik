# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Map
scalar Any
scalar Time
scalar Path

enum Operator {
  NEQ
  EQ
}

enum Direction {
  DIRECTED
  UNDIRECTED
}

type Counter {
  count: Int!
}

type Node {
  path: Path!
  attributes: Map
  createdAt: Time!
  updatedAt: Time!
}

type Edge {
  path: Path!
  direction: Direction!
  attributes: Map
  from: Path!
  to: Path!
  createdAt: Time!
  updatedAt: Time!
}

type Export {
  nodes: [Node]
  edges: [Edge]
}

type SearchResult {
  path: Path!
  val: Any
}

type SearchResults {
  search: String!
  results: [SearchResult!]
}

input Statement {
  expression: String!
  operator: Operator!
  value: Any!
}

input Filter {
  type: String!
  statements: [Statement!]
  limit: Int!
}

input EdgeConstructor {
  path: Path!
  direction: Direction!
  attributes: Map
  from: Path!
  to: Path!
}

input NodeConstructor {
  path: Path!
  attributes: Map
}

input Patch {
  path: Path!
  patch: Map!
}

input Search {
  search: String!
  type: String!
  limit: Int!
}

input DepthSearch {
  depth: Int!
  path: Path!
  edgeType: String!
  limit: Int!
}

type Query {
  # node returns a node using a foreign key
  node(input: Path!): Node
  nodes(input: Filter!): [Node!]!
  depthFrom(input: DepthSearch!): [Node!]!
  depthTo(input: DepthSearch!): [Node!]!
  searchNodes(input: Search!): SearchResults!
  # edge returns an edge using a foreign key
  edge(input: Path!): Edge
  # edges traverses the graph and returns edges that pass the given filter
  edges(input: Filter!): [Edge!]!
  # searchEdges traverses the graph and returns edges that pass the given filter
  searchEdges(input: Search!): SearchResults!
}

type Mutation {
  createNode(input: NodeConstructor!): Node!
  patchNode(input: Patch): Node!
  delNode(input: Path!): Counter

  createEdge(input: EdgeConstructor!): Edge!
  patchEdge(input: Patch!): Edge!
  delEdge(input: Path!): Counter

}
